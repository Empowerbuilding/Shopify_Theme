{% comment %}
  Main Cart Section
  Displays shopping cart with items, quantities, and checkout
{% endcomment %}

<style>
  .cart-page {
    padding: 4rem 0;
    min-height: 60vh;
  }
  
  .cart-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  
  .cart-header {
    margin-bottom: 3rem;
  }
  
  .cart-title {
    font-size: 2.5rem;
    font-weight: 700;
    background: linear-gradient(135deg, #B8860B 0%, #FFD700 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.5rem;
  }
  
  .cart-count {
    color: var(--color-text-gray);
    font-size: 1.125rem;
  }
  
  .cart-content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  @media (min-width: 1024px) {
    .cart-content {
      grid-template-columns: 2fr 1fr;
    }
  }
  
  .cart-items {
    background: #2A2A2A;
    border-radius: 8px;
    padding: 1.5rem;
    border: 1px solid var(--color-border);
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 80px 1fr auto;
    gap: 1.5rem;
    padding: 1.5rem 0;
    border-bottom: 1px solid var(--color-border);
    align-items: start;
  }
  
  .cart-item:first-child {
    padding-top: 0;
  }
  
  .cart-item:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }
  
  .cart-item-image {
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
    background: #f5f5f5;
    flex-shrink: 0;
  }
  
  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .cart-item-details {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .cart-item-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
    text-decoration: none;
    transition: color 0.2s;
  }
  
  .cart-item-title:hover {
    color: var(--color-gold);
  }
  
  .cart-item-variant {
    color: var(--color-text-gray);
    font-size: 0.875rem;
  }
  
  .cart-item-price {
    color: var(--color-gold);
    font-size: 1.125rem;
    font-weight: 600;
  }
  
  .cart-item-quantity {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.75rem;
  }
  
  .quantity-label {
    color: var(--color-text-gray);
    font-size: 0.875rem;
    margin-right: 0.5rem;
  }
  
  .quantity-controls {
    display: flex;
    align-items: center;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    overflow: hidden;
  }
  
  .quantity-btn {
    background: transparent;
    border: none;
    color: white;
    padding: 0.5rem 0.75rem;
    cursor: pointer;
    transition: background 0.2s;
    font-size: 1.25rem;
    line-height: 1;
  }
  
  .quantity-btn:hover {
    background: rgba(184, 134, 11, 0.2);
  }
  
  .quantity-input {
    background: transparent;
    border: none;
    border-left: 1px solid var(--color-border);
    border-right: 1px solid var(--color-border);
    color: white;
    width: 60px;
    text-align: center;
    padding: 0.5rem;
    font-size: 1rem;
  }
  
  .cart-item-remove {
    background: transparent;
    border: none;
    color: #DC2626;
    cursor: pointer;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    transition: opacity 0.2s;
  }
  
  .cart-item-remove:hover {
    opacity: 0.8;
  }
  
  .cart-item-actions {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.75rem;
  }
  
  .cart-item-total {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-gold);
  }
  
  .cart-summary {
    background: #2A2A2A;
    border-radius: 8px;
    padding: 1.5rem;
    border: 1px solid var(--color-border);
    height: fit-content;
    position: sticky;
    top: 2rem;
  }
  
  .cart-summary-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: white;
  }
  
  .cart-summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    color: var(--color-text-gray);
  }
  
  .cart-summary-row.total {
    border-top: 1px solid var(--color-border);
    padding-top: 1rem;
    margin-top: 1rem;
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
  }
  
  .cart-summary-row.total .cart-summary-value {
    color: var(--color-gold);
  }
  
  .cart-buttons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 1.5rem;
  }
  
  .cart-empty {
    text-align: center;
    padding: 4rem 2rem;
  }
  
  .cart-empty-icon {
    font-size: 4rem;
    margin-bottom: 1.5rem;
  }
  
  .cart-empty-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: white;
  }
  
  .cart-empty-text {
    color: var(--color-text-gray);
    font-size: 1.125rem;
    margin-bottom: 2rem;
  }
  
  .cart-note {
    margin-top: 1.5rem;
  }
  
  .cart-note-label {
    display: block;
    font-size: 0.875rem;
    color: var(--color-text-gray);
    margin-bottom: 0.5rem;
  }
  
  .cart-note-input {
    width: 100%;
    padding: 0.75rem;
    background: #1C1C1C;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    color: white;
    font-size: 0.875rem;
    resize: vertical;
    min-height: 80px;
  }
  
  @media (max-width: 768px) {
    .cart-title {
      font-size: 2rem;
    }
    
    .cart-item {
      grid-template-columns: 60px 1fr;
      gap: 1rem;
    }
    
    .cart-item-image {
      width: 60px;
      height: 60px;
    }
    
    .cart-item-actions {
      grid-column: 1 / -1;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      margin-top: 0.5rem;
    }
    
    .cart-summary {
      position: static;
    }
  }
</style>

<section class="cart-page">
  <div class="cart-container">
    {% if cart.item_count > 0 %}
      <div class="cart-header">
        <h1 class="cart-title">Shopping Cart</h1>
        <p class="cart-count">
          {{ cart.item_count }} 
          {% if cart.item_count == 1 %}
            item
          {% else %}
            items
          {% endif %}
        </p>
      </div>
      
      <div class="cart-content">
        <!-- Cart Items -->
        <div class="cart-items">
          {% for item in cart.items %}
            <div class="cart-item" data-line="{{ forloop.index }}">
              <div class="cart-item-image">
                {% if item.image %}
                  <img src="{{ item.image | img_url: '160x160' }}" 
                       alt="{{ item.image.alt | escape }}">
                {% else %}
                  <img src="{{ 'product-placeholder.png' | asset_url }}" 
                       alt="Product placeholder">
                {% endif %}
              </div>
              
              <div class="cart-item-details">
                <a href="{{ item.url }}" class="cart-item-title">
                  {{ item.product.title }}
                </a>
                
                {% unless item.variant.title == 'Default Title' %}
                  <div class="cart-item-variant">
                    {{ item.variant.title }}
                  </div>
                {% endunless %}
                
                {% if item.properties %}
                  {% for property in item.properties %}
                    {% unless property.last == blank %}
                      <div class="cart-item-variant">
                        {{ property.first }}: {{ property.last }}
                      </div>
                    {% endunless %}
                  {% endfor %}
                {% endif %}
                
                <div class="cart-item-price">
                  {{ item.price | money }}
                </div>
                
                <div class="cart-item-quantity">
                  <span class="quantity-label">Qty:</span>
                  <div class="quantity-controls">
                    <button type="button" 
                            class="quantity-btn" 
                            onclick="updateQuantity({{ forloop.index }}, {{ item.quantity | minus: 1 }})">
                      âˆ’
                    </button>
                    <input type="number" 
                           class="quantity-input" 
                           value="{{ item.quantity }}" 
                           min="0"
                           data-line="{{ forloop.index }}"
                           onchange="updateQuantity({{ forloop.index }}, this.value)">
                    <button type="button" 
                            class="quantity-btn" 
                            onclick="updateQuantity({{ forloop.index }}, {{ item.quantity | plus: 1 }})">
                      +
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="cart-item-actions">
                <div class="cart-item-total">
                  {{ item.line_price | money }}
                </div>
                <button type="button" 
                        class="cart-item-remove" 
                        onclick="removeItem({{ forloop.index }})">
                  Remove
                </button>
              </div>
            </div>
          {% endfor %}
        </div>
        
        <!-- Cart Summary -->
        <div class="cart-summary">
          <h2 class="cart-summary-title">Order Summary</h2>
          
          <div class="cart-summary-row">
            <span>Subtotal</span>
            <span class="cart-summary-value" id="cart-subtotal">{{ cart.total_price | money }}</span>
          </div>
          
          <div class="cart-summary-row">
            <span>Shipping</span>
            <span class="cart-summary-value">Calculated at checkout</span>
          </div>
          
          <div class="cart-summary-row total">
            <span>Total</span>
            <span class="cart-summary-value" id="cart-total">{{ cart.total_price | money }}</span>
          </div>
          
          {% if section.settings.show_cart_note %}
            <div class="cart-note">
              <label class="cart-note-label" for="cart-note">Order notes (optional)</label>
              <textarea id="cart-note" 
                        name="note" 
                        class="cart-note-input"
                        placeholder="Special instructions for your order...">{{ cart.note }}</textarea>
            </div>
          {% endif %}
          
          <div class="cart-buttons">
            <button type="button" class="btn btn-large btn-full-width" onclick="proceedToCheckout()">
              Proceed to Checkout
            </button>
            <a href="/collections/all" class="btn btn-secondary btn-large btn-full-width">
              Continue Shopping
            </a>
          </div>
          
          <div style="margin-top: 1.5rem; padding: 1rem; background: rgba(184, 134, 11, 0.1); border-radius: 4px; border: 1px solid var(--color-border);">
            <p style="margin: 0; color: var(--color-text-gray); font-size: 0.875rem; text-align: center;">
              ðŸ”’ Secure Checkout<br>
              ðŸ’³ Multiple Payment Options<br>
              ðŸ“¦ Free Shipping on Orders $500+
            </p>
          </div>
        </div>
      </div>
      
    {% else %}
      <!-- Empty Cart -->
      <div class="cart-empty">
        <div class="cart-empty-icon">ðŸ›’</div>
        <h1 class="cart-empty-title">Your cart is empty</h1>
        <p class="cart-empty-text">
          Start building your dream with our steel building plans and materials.
        </p>
        <a href="/collections/all" class="btn btn-large">
          Continue Shopping
        </a>
      </div>
    {% endif %}
  </div>
</section>

<script>
  // Update cart quantity
  function updateQuantity(line, quantity) {
    quantity = parseInt(quantity);
    
    if (quantity < 0) {
      quantity = 0;
    }
    
    fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        line: line,
        quantity: quantity
      })
    })
    .then(response => response.json())
    .then(cart => {
      if (quantity === 0) {
        // Reload page to show updated cart
        window.location.reload();
      } else {
        // Update the cart display
        updateCartDisplay(cart);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('There was an error updating your cart. Please try again.');
    });
  }
  
  // Remove item from cart
  function removeItem(line) {
    updateQuantity(line, 0);
  }
  
  // Update cart display
  function updateCartDisplay(cart) {
    // Update totals
    const subtotalElement = document.getElementById('cart-subtotal');
    const totalElement = document.getElementById('cart-total');
    
    if (subtotalElement) {
      subtotalElement.textContent = Shopify.formatMoney(cart.total_price, theme.moneyFormat);
    }
    if (totalElement) {
      totalElement.textContent = Shopify.formatMoney(cart.total_price, theme.moneyFormat);
    }
    
    // Update line item totals
    cart.items.forEach((item, index) => {
      const lineIndex = index + 1;
      const cartItem = document.querySelector(`[data-line="${lineIndex}"]`);
      if (cartItem) {
        const totalElement = cartItem.querySelector('.cart-item-total');
        if (totalElement) {
          totalElement.textContent = Shopify.formatMoney(item.line_price, theme.moneyFormat);
        }
        
        const quantityInput = cartItem.querySelector('.quantity-input');
        if (quantityInput) {
          quantityInput.value = item.quantity;
        }
      }
    });
    
    // Update cart count in header
    if (typeof updateCartCount === 'function') {
      updateCartCount(cart.item_count);
    }
  }
  
  // Proceed to checkout
  function proceedToCheckout() {
    const note = document.getElementById('cart-note');
    if (note && note.value) {
      // Update cart note before checkout
      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          note: note.value
        })
      })
      .then(() => {
        window.location.href = '/checkout';
      })
      .catch(() => {
        window.location.href = '/checkout';
      });
    } else {
      window.location.href = '/checkout';
    }
  }
  
  // Prevent negative quantities
  document.querySelectorAll('.quantity-input').forEach(input => {
    input.addEventListener('blur', function() {
      if (parseInt(this.value) < 0) {
        this.value = 0;
        const line = this.getAttribute('data-line');
        updateQuantity(line, 0);
      }
    });
  });
</script>

{% schema %}
{
  "name": "Cart",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "Show order notes",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    }
  ]
}
{% endschema %}

