{% comment %}
  Main Product Section
  Displays product images, details, and add to cart functionality
{% endcomment %}

<section class="product-page">
  <!-- Mobile Back Button -->
  <button class="mobile-back-button" onclick="window.history.back()" aria-label="Go back">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <line x1="19" y1="12" x2="5" y2="12"></line>
      <polyline points="12 19 5 12 12 5"></polyline>
    </svg>
  </button>

  <div class="container">
    <div class="product-main">
      <!-- Product Gallery (Images & 3D Models) -->
      <div class="product-gallery">
        <div class="product-image-main" id="product-image-main">
          <div class="image-carousel" id="image-carousel">
            {% if product.media.size > 0 %}
              {% for media in product.media %}
                {% if media.media_type == 'image' %}
                  <div class="carousel-image {% if forloop.first %}active{% endif %}" onclick="openLightbox({{ forloop.index0 }})" style="cursor: zoom-in;" data-media-type="image">
                    <img src="{{ media | img_url: '800x800' }}" 
                         alt="{{ media.alt | escape }}"
                         loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                  </div>
                {% elsif media.media_type == 'video' %}
                  <div class="carousel-image {% if forloop.first %}active{% endif %}" data-media-type="video">
                    <video 
                      class="product-video"
                      autoplay
                      muted
                      loop
                      playsinline
                      preload="auto"
                      {% if media.preview_image %}poster="{{ media.preview_image | img_url: '800x800' }}"{% endif %}>
                      {% for source in media.sources %}
                        <source src="{{ source.url }}" type="{{ source.mime_type }}">
                      {% endfor %}
                      Your browser does not support the video tag.
                    </video>
                    <button class="video-unmute-btn" onclick="toggleVideoMute(event, this)" aria-label="Unmute video">
                      <svg class="muted-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                        <line x1="23" y1="9" x2="17" y2="15"></line>
                        <line x1="17" y1="9" x2="23" y2="15"></line>
                      </svg>
                      <svg class="unmuted-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                        <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
                        <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                      </svg>
                    </button>
                  </div>
                {% elsif media.media_type == 'model' %}
                  <div class="carousel-image {% if forloop.first %}active{% endif %}" data-media-type="model">
                    {% assign model_src = '' %}
                    {% for source in media.sources %}
                      {% if source.format == 'glb' %}
                        {% assign model_src = source.url %}
                        {% break %}
                      {% endif %}
                    {% endfor %}
                    {% if model_src == '' %}
                      {% assign model_src = media.sources[0].url %}
                    {% endif %}
                    <model-viewer 
                      src="{{ model_src }}"
                      {% if media.preview_image %}poster="{{ media.preview_image | img_url: '800x800' }}"{% endif %}
                      alt="{{ media.alt | escape }}"
                      auto-rotate
                      auto-rotate-delay="0"
                      camera-controls
                      interaction-prompt="auto"
                      touch-action="pan-y"
                      camera-orbit="45deg 75deg 25m"
                      min-camera-orbit="auto auto 10m"
                      max-camera-orbit="auto auto 50m"
                      field-of-view="40deg"
                      camera-target="auto auto auto"
                      ar
                      ar-modes="webxr scene-viewer quick-look"
                      shadow-intensity="1"
                      class="product-model-viewer"
                      data-media-id="{{ media.id }}">
                    </model-viewer>
                  </div>
                {% endif %}
              {% endfor %}
            {% else %}
              <div class="carousel-image active" data-media-type="image">
                <img src="{{ 'product-placeholder.png' | asset_url }}" alt="Product placeholder">
              </div>
            {% endif %}
          </div>
          
          {% if product.media.size > 1 %}
            <!-- Media Navigation Arrows -->
            <button class="image-nav-btn prev" onclick="previousImage()" aria-label="Previous media">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="15 18 9 12 15 6"></polyline>
              </svg>
            </button>
            <button class="image-nav-btn next" onclick="nextImage()" aria-label="Next media">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </button>
            
            <!-- Media Indicators (Dots) -->
            <div class="image-indicators" id="image-indicators">
              {% for media in product.media %}
                <span class="indicator {% if forloop.first %}active{% endif %}" onclick="goToImage({{ forloop.index0 }})"></span>
              {% endfor %}
            </div>
          {% endif %}
        </div>
        
        {% if product.media.size > 1 %}
          <div class="product-thumbnails">
            {% for media in product.media %}
              <div class="product-thumbnail {% if forloop.first %}active{% endif %}" 
                   data-image-index="{{ forloop.index0 }}"
                   data-media-type="{{ media.media_type }}"
                   onclick="goToImage({{ forloop.index0 }})">
                {% if media.media_type == 'image' %}
                  <img src="{{ media | img_url: '100x100' }}" alt="{{ media.alt | escape }}">
                {% elsif media.media_type == 'video' %}
                  <div class="video-thumbnail-icon">
                    <!-- Play Icon Overlay -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="#B8860B" stroke="#B8860B" stroke-width="2">
                      <circle cx="12" cy="12" r="10" fill="rgba(184, 134, 11, 0.3)"></circle>
                      <polygon points="10 8 16 12 10 16 10 8" fill="#B8860B"></polygon>
                    </svg>
                    {% if media.preview_image %}
                      <img src="{{ media.preview_image | img_url: '100x100' }}" alt="{{ media.alt | escape }}" style="position: absolute; inset: 0; object-fit: cover; z-index: 0;">
                    {% endif %}
                  </div>
                {% elsif media.media_type == 'model' %}
                  <div class="model-thumbnail-icon">
                    <!-- 3D Cube Icon -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="#B8860B" stroke-width="2">
                      <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
                      <polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline>
                      <line x1="12" y1="22.08" x2="12" y2="12"></line>
                    </svg>
                    {% if media.preview_image %}
                      <img src="{{ media.preview_image | img_url: '100x100' }}" alt="{{ media.alt | escape }}" style="opacity: 0.3; position: absolute; inset: 0; object-fit: cover;">
                    {% endif %}
                  </div>
                {% endif %}
              </div>
            {% endfor %}
          </div>
        {% endif %}
      </div>
      
      <!-- Product Info -->
      <div class="product-info">
        <h1 class="product-title">{{ product.title }}</h1>
        
        {% if product.vendor %}
          <p class="product-vendor" style="color: var(--color-text-gray); margin-bottom: 1rem;">
            {{ product.vendor }}
          </p>
        {% endif %}
        
        <div class="product-price">
          {% if product.compare_at_price > product.price %}
            <span style="text-decoration: line-through; opacity: 0.6; font-size: 1.25rem; margin-right: 0.5rem;">
              {{ product.compare_at_price | money }}
            </span>
          {% endif %}
          <span id="product-price">{{ product.price | money }}</span>
        </div>
        
        <!-- Product Form -->
        <form method="post" action="/cart/add" id="product-form" class="product-form">
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" id="product-variant-id">
          
          <!-- Variants -->
          {% unless product.has_only_default_variant %}
            <div class="product-options">
              {% for option in product.options_with_values %}
                <div class="form-group">
                  <label class="form-label" for="option-{{ option.name | handleize }}">
                    {{ option.name }}
                  </label>
                  <select class="form-select" 
                          id="option-{{ option.name | handleize }}"
                          name="options[{{ option.name | escape }}]"
                          onchange="updateVariant()">
                    {% for value in option.values %}
                      <option value="{{ value | escape }}" 
                              {% if option.selected_value == value %}selected{% endif %}>
                        {{ value }}
                      </option>
                    {% endfor %}
                  </select>
                </div>
              {% endfor %}
            </div>
          {% endunless %}
          
          <!-- Hidden Quantity (always 1 for floor plans) -->
          <input type="hidden" name="quantity" id="quantity" value="1">
          
          <!-- Add to Cart Button -->
          <button type="submit" 
                  class="btn btn-large btn-full-width" 
                  id="add-to-cart-button"
                  {% unless product.available %}disabled{% endunless %}>
            {% if product.available %}
              Add to Cart
            {% else %}
              Sold Out
            {% endif %}
          </button>
        </form>
        
        {% if product.description != blank %}
          <div class="product-description">
            <div class="product-description-content">
              {{ product.description }}
            </div>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
  
  <!-- Media Lightbox Modal (Images & 3D Models) -->
  <div id="image-lightbox" class="lightbox" onclick="closeLightbox(event)">
    <button class="lightbox-close" onclick="closeLightbox(event)" aria-label="Close lightbox">
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    
    <div class="lightbox-content">
      <div class="lightbox-images" id="lightbox-images">
        {% if product.media.size > 0 %}
          {% for media in product.media %}
            {% if media.media_type == 'image' %}
              <div class="lightbox-image {% if forloop.first %}active{% endif %}" data-media-type="image">
                <img src="{{ media | img_url: '1200x1200' }}" 
                     alt="{{ media.alt | escape }}"
                     loading="lazy">
              </div>
            {% elsif media.media_type == 'video' %}
              <div class="lightbox-image {% if forloop.first %}active{% endif %}" data-media-type="video">
                <video 
                  class="lightbox-video"
                  controls
                  playsinline
                  preload="metadata"
                  {% if media.preview_image %}poster="{{ media.preview_image | img_url: '1200x1200' }}"{% endif %}>
                  {% for source in media.sources %}
                    <source src="{{ source.url }}" type="{{ source.mime_type }}">
                  {% endfor %}
                  Your browser does not support the video tag.
                </video>
              </div>
            {% elsif media.media_type == 'model' %}
              <div class="lightbox-image {% if forloop.first %}active{% endif %}" data-media-type="model">
                {% assign model_src = '' %}
                {% for source in media.sources %}
                  {% if source.format == 'glb' %}
                    {% assign model_src = source.url %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {% if model_src == '' %}
                  {% assign model_src = media.sources[0].url %}
                {% endif %}
                <model-viewer 
                  src="{{ model_src }}"
                  {% if media.preview_image %}poster="{{ media.preview_image | img_url: '1200x1200' }}"{% endif %}
                  alt="{{ media.alt | escape }}"
                  auto-rotate
                  auto-rotate-delay="0"
                  camera-controls
                  interaction-prompt="auto"
                  touch-action="pan-y"
                  camera-orbit="45deg 75deg 30m"
                  min-camera-orbit="auto auto 15m"
                  max-camera-orbit="auto auto 60m"
                  field-of-view="40deg"
                  camera-target="auto auto auto"
                  ar
                  ar-modes="webxr scene-viewer quick-look"
                  shadow-intensity="1"
                  class="lightbox-model-viewer"
                  data-media-id="{{ media.id }}">
                </model-viewer>
              </div>
            {% endif %}
          {% endfor %}
        {% endif %}
      </div>
      
      {% if product.media.size > 1 %}
        <button class="lightbox-nav prev" onclick="lightboxPrevious(event)" aria-label="Previous media">
          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>
        <button class="lightbox-nav next" onclick="lightboxNext(event)" aria-label="Next media">
          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
        
        <div class="lightbox-counter" id="lightbox-counter">1 / {{ product.media.size }}</div>
      {% endif %}
    </div>
  </div>
</section>

<!-- Model Viewer Library - Only load if product has 3D models -->
{% assign has_3d_model = false %}
{% for media in product.media %}
  {% if media.media_type == 'model' %}
    {% assign has_3d_model = true %}
    {% break %}
  {% endif %}
{% endfor %}

{% if has_3d_model %}
<script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/3.4.0/model-viewer.min.js"></script>
{% endif %}

<script>
  // Product variants data
  const productVariants = {{ product.variants | json }};
  const productOptions = {{ product.options_with_values | json }};
  
  // Image carousel management
  let currentImageIndex = 0;
  const carouselImages = document.querySelectorAll('.carousel-image');
  const indicators = document.querySelectorAll('.indicator');
  const thumbnails = document.querySelectorAll('.product-thumbnail');
  
  // Go to specific image
  function goToImage(index) {
    if (index < 0 || index >= carouselImages.length) return;
    
    // Pause video in current slide if it exists
    const currentVideo = carouselImages[currentImageIndex].querySelector('video');
    if (currentVideo) {
      currentVideo.pause();
      currentVideo.currentTime = 0; // Reset to start
    }
    
    // Hide current image
    carouselImages[currentImageIndex].classList.remove('active');
    if (indicators[currentImageIndex]) {
      indicators[currentImageIndex].classList.remove('active');
    }
    if (thumbnails[currentImageIndex]) {
      thumbnails[currentImageIndex].classList.remove('active');
    }
    
    // Show new image
    currentImageIndex = index;
    carouselImages[currentImageIndex].classList.add('active');
    if (indicators[currentImageIndex]) {
      indicators[currentImageIndex].classList.add('active');
    }
    if (thumbnails[currentImageIndex]) {
      thumbnails[currentImageIndex].classList.add('active');
    }
    
    // Auto-play video in new slide if it exists
    const newVideo = carouselImages[currentImageIndex].querySelector('.product-video');
    if (newVideo) {
      newVideo.play().catch(error => {
        console.log('Video autoplay prevented:', error);
      });
    }
  }
  
  // Next image
  function nextImage() {
    const nextIndex = (currentImageIndex + 1) % carouselImages.length;
    goToImage(nextIndex);
  }
  
  // Previous image
  function previousImage() {
    const prevIndex = (currentImageIndex - 1 + carouselImages.length) % carouselImages.length;
    goToImage(prevIndex);
  }
  
  // Touch swipe functionality
  let touchStartX = 0;
  let touchEndX = 0;
  const carousel = document.getElementById('image-carousel');
  
  if (carousel) {
    carousel.addEventListener('touchstart', function(e) {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    carousel.addEventListener('touchend', function(e) {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
  }
  
  function handleSwipe() {
    const swipeThreshold = 50; // Minimum swipe distance
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        // Swiped left - next image
        nextImage();
      } else {
        // Swiped right - previous image
        previousImage();
      }
    }
  }
  
  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
      previousImage();
    } else if (e.key === 'ArrowRight') {
      nextImage();
    }
  });
  
  // Lightbox functionality
  let lightboxCurrentIndex = 0;
  const lightboxImages = document.querySelectorAll('.lightbox-image');
  const lightbox = document.getElementById('image-lightbox');
  const lightboxCounter = document.getElementById('lightbox-counter');
  
  // Open lightbox
  function openLightbox(index) {
    lightboxCurrentIndex = index;
    updateLightboxImage();
    lightbox.classList.add('active');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
  }
  
  // Close lightbox
  function closeLightbox(event) {
    if (event) {
      event.stopPropagation();
      // Only close if clicking the backdrop or close button
      if (event.target === lightbox || event.currentTarget.classList.contains('lightbox-close')) {
        lightbox.classList.remove('active');
        document.body.style.overflow = ''; // Restore scrolling
      }
    } else {
      lightbox.classList.remove('active');
      document.body.style.overflow = '';
    }
  }
  
  // Update lightbox image
  function updateLightboxImage() {
    lightboxImages.forEach((img, idx) => {
      const isActive = idx === lightboxCurrentIndex;
      img.classList.toggle('active', isActive);
      
      // Pause videos that are not active
      const video = img.querySelector('video');
      if (video && !isActive) {
        video.pause();
      }
    });
    
    if (lightboxCounter && lightboxImages.length > 1) {
      lightboxCounter.textContent = `${lightboxCurrentIndex + 1} / ${lightboxImages.length}`;
    }
  }
  
  // Lightbox next image
  function lightboxNext(event) {
    if (event) event.stopPropagation();
    lightboxCurrentIndex = (lightboxCurrentIndex + 1) % lightboxImages.length;
    updateLightboxImage();
  }
  
  // Lightbox previous image
  function lightboxPrevious(event) {
    if (event) event.stopPropagation();
    lightboxCurrentIndex = (lightboxCurrentIndex - 1 + lightboxImages.length) % lightboxImages.length;
    updateLightboxImage();
  }
  
  // Lightbox keyboard navigation
  document.addEventListener('keydown', function(e) {
    if (!lightbox.classList.contains('active')) return;
    
    if (e.key === 'Escape') {
      closeLightbox();
    } else if (e.key === 'ArrowLeft') {
      lightboxPrevious();
    } else if (e.key === 'ArrowRight') {
      lightboxNext();
    }
  });
  
  // Prevent lightbox content clicks from closing
  if (lightbox) {
    const lightboxContent = lightbox.querySelector('.lightbox-content');
    if (lightboxContent) {
      lightboxContent.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    }
  }
  
  // Update variant based on selected options
  function updateVariant() {
    const selectedOptions = [];
    document.querySelectorAll('.form-select').forEach(function(select) {
      selectedOptions.push(select.value);
    });
    
    // Find matching variant
    const variant = productVariants.find(function(v) {
      return v.options.every(function(option, index) {
        return option === selectedOptions[index];
      });
    });
    
    if (variant) {
      // Update variant ID
      document.getElementById('product-variant-id').value = variant.id;
      
      // Update price
      const priceElement = document.getElementById('product-price');
      if (priceElement) {
        priceElement.textContent = Shopify.formatMoney(variant.price, theme.moneyFormat);
      }
      
      // Update availability
      const button = document.getElementById('add-to-cart-button');
      if (variant.available) {
        button.disabled = false;
        button.textContent = 'Add to Cart';
      } else {
        button.disabled = true;
        button.textContent = 'Sold Out';
      }
      
      // Update image if variant has one
      if (variant.featured_image && variant.featured_image.src) {
        const mainImage = document.getElementById('main-product-image');
        if (mainImage) {
          mainImage.src = variant.featured_image.src;
        }
      }
    }
  }
  
  // Quantity controls
  function increaseQuantity() {
    const input = document.getElementById('quantity');
    input.value = parseInt(input.value) + 1;
  }
  
  function decreaseQuantity() {
    const input = document.getElementById('quantity');
    if (parseInt(input.value) > 1) {
      input.value = parseInt(input.value) - 1;
    }
  }
  
  function validateQuantity() {
    const input = document.getElementById('quantity');
    if (parseInt(input.value) < 1) {
      input.value = 1;
    }
  }
  
  // Handle add to cart form submission
  document.getElementById('product-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const button = document.getElementById('add-to-cart-button');
    const originalText = button.textContent;
    
    button.disabled = true;
    button.textContent = 'Adding...';
    
    fetch('/cart/add.js', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      // Update cart count
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          updateCartCount(cart.item_count);
        });
      
      button.textContent = 'Added! ✓';
      
      // Automatically open cart drawer
      setTimeout(function() {
        openCartDrawer();
      }, 500);
      
      setTimeout(function() {
        button.disabled = false;
        button.textContent = originalText;
      }, 2000);
    })
    .catch(error => {
      console.error('Error:', error);
      button.disabled = false;
      button.textContent = originalText;
      alert('There was an error adding the product to your cart. Please try again.');
    });
  });
  
  // Toggle video mute/unmute
  function toggleVideoMute(event, button) {
    event.stopPropagation();
    
    const videoContainer = button.closest('.carousel-image');
    const video = videoContainer.querySelector('video');
    const mutedIcon = button.querySelector('.muted-icon');
    const unmutedIcon = button.querySelector('.unmuted-icon');
    
    if (video.muted) {
      video.muted = false;
      mutedIcon.style.display = 'none';
      unmutedIcon.style.display = 'block';
      button.setAttribute('aria-label', 'Mute video');
    } else {
      video.muted = true;
      mutedIcon.style.display = 'block';
      unmutedIcon.style.display = 'none';
      button.setAttribute('aria-label', 'Unmute video');
    }
  }
  
  // Auto-play first video on page load
  document.addEventListener('DOMContentLoaded', function() {
    const firstSlide = document.querySelector('.carousel-image.active');
    if (firstSlide && firstSlide.getAttribute('data-media-type') === 'video') {
      const video = firstSlide.querySelector('.product-video');
      if (video) {
        video.play().catch(error => {
          console.log('Video autoplay on load prevented:', error);
        });
      }
    }
  });
  
  // Video Interaction Handling - Prevent lightbox from opening when clicking on videos
  document.addEventListener('DOMContentLoaded', function() {
    const carouselVideos = document.querySelectorAll('.carousel-image[data-media-type="video"]');
    
    carouselVideos.forEach((videoContainer) => {
      const video = videoContainer.querySelector('video');
      
      if (video) {
        // Prevent lightbox from opening when clicking on video
        video.addEventListener('click', function(e) {
          e.stopPropagation();
        });
        
        videoContainer.onclick = function(e) {
          // Prevent lightbox opening when clicking on video container
          e.stopPropagation();
        };
      }
    });
    
    // Handle lightbox videos - prevent closing when interacting
    const lightboxVideos = document.querySelectorAll('.lightbox-image[data-media-type="video"] video');
    
    lightboxVideos.forEach((video) => {
      video.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    });
  });
  
  // 3D Model Viewer Interaction Handling - Only run if models exist
  document.addEventListener('DOMContentLoaded', function() {
    // Check if there are any 3D models on this page
    const carouselModels = document.querySelectorAll('.carousel-image[data-media-type="model"]');
    
    // Exit early if no 3D models found - improves performance
    if (carouselModels.length === 0) {
      return;
    }
    
    carouselModels.forEach((modelContainer, index) => {
      const modelViewer = modelContainer.querySelector('model-viewer');
      
      if (modelViewer) {
        // Prevent lightbox from opening when interacting with model
        modelViewer.addEventListener('mousedown', function(e) {
          e.stopPropagation();
        });
        
        modelViewer.addEventListener('touchstart', function(e) {
          e.stopPropagation();
        });
        
        // Override the container's onclick for model containers
        modelContainer.onclick = function(e) {
          // Only open lightbox if clicking outside the model-viewer element
          if (e.target.tagName !== 'MODEL-VIEWER' && !e.target.closest('model-viewer')) {
            const mediaIndex = Array.from(document.querySelectorAll('.carousel-image')).indexOf(modelContainer);
            openLightbox(mediaIndex);
          }
        };
      }
    });
    
    // Handle lightbox model viewers
    const lightboxModels = document.querySelectorAll('.lightbox-image[data-media-type="model"] model-viewer');
    
    lightboxModels.forEach((modelViewer) => {
      // Prevent lightbox from closing when interacting with model
      modelViewer.addEventListener('click', function(e) {
        e.stopPropagation();
      });
      
      modelViewer.addEventListener('mousedown', function(e) {
        e.stopPropagation();
      });
      
      modelViewer.addEventListener('touchstart', function(e) {
        e.stopPropagation();
      });
    });
    
    // Pause auto-rotate when user interacts, resume when idle
    document.querySelectorAll('model-viewer').forEach((modelViewer) => {
      let interacting = false;
      
      modelViewer.addEventListener('camera-change', function() {
        if (!interacting) {
          interacting = true;
          modelViewer.autoRotate = false;
        }
        
        // Resume auto-rotate after 3 seconds of no interaction
        clearTimeout(modelViewer.rotateTimeout);
        modelViewer.rotateTimeout = setTimeout(() => {
          modelViewer.autoRotate = true;
          interacting = false;
        }, 3000);
      });
    });
  });
  
  // Debug 3D Model URLs and Loading
  document.addEventListener('DOMContentLoaded', function() {
    const modelViewers = document.querySelectorAll('model-viewer');
    
    console.log('=== 3D Model Viewer Debug Info ===');
    console.log('Total model-viewer elements found:', modelViewers.length);
    
    modelViewers.forEach((mv, i) => {
      const src = mv.getAttribute('src');
      const mediaId = mv.getAttribute('data-media-id');
      
      console.log('\nModel ' + i + ':');
      console.log('  Media ID:', mediaId);
      console.log('  Source URL:', src);
      console.log('  Poster:', mv.getAttribute('poster'));
      
      // Test if URL is accessible
      if (src) {
        fetch(src, { method: 'HEAD' })
          .then(response => {
            console.log('  Response Status:', response.status);
            console.log('  Content-Type:', response.headers.get('content-type'));
            console.log('  Content-Length:', response.headers.get('content-length'));
            
            if (response.status !== 200) {
              console.error('  ❌ Model file returned non-200 status!');
            } else {
              console.log('  ✓ Model file is accessible');
            }
          })
          .catch(error => {
            console.error('  ❌ Fetch error:', error);
          });
      } else {
        console.error('  ❌ No source URL found!');
      }
      
      // Listen for model-viewer errors
      mv.addEventListener('error', function(event) {
        console.error('Model ' + i + ' error event:', event);
      });
      
      // Listen for model load success
      mv.addEventListener('load', function() {
        console.log('✓ Model ' + i + ' loaded successfully!');
      });
    });
    
    console.log('=== End Debug Info ===\n');
  });
</script>

<style>
/* 3D Model Viewer Styles */
model-viewer {
  width: 100%;
  height: 100%;
  background-color: #1C1C1C;
  --poster-color: #1C1C1C;
  position: relative;
  z-index: 2;
  pointer-events: auto !important;
  touch-action: pan-y;
  cursor: grab;
  display: block;
}

model-viewer:active {
  cursor: grabbing;
}

/* Ensure interaction prompt is visible */
model-viewer::part(interaction-prompt) {
  color: #B8860B;
  font-weight: 600;
}

.product-model-viewer {
  width: 100%;
  min-height: 500px;
  border-radius: 8px;
}

.lightbox-model-viewer {
  width: 100%;
  height: 80vh;
  max-height: 800px;
}

/* Model Viewer AR Button Styling */
model-viewer::part(default-ar-button) {
  background-color: #B8860B;
  color: #1C1C1C;
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-weight: 700;
  transition: all 0.3s ease;
}

model-viewer::part(default-ar-button):hover {
  background-color: #FFD700;
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(184, 134, 11, 0.5);
}

/* Model Thumbnail Icon Styling */
.model-thumbnail-icon {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #1C1C1C;
  position: relative;
  border-radius: 8px;
  overflow: hidden;
}

.model-thumbnail-icon svg {
  position: relative;
  z-index: 2;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.5));
}

.product-thumbnail[data-media-type="model"] {
  border: 2px solid #B8860B;
}

.product-thumbnail[data-media-type="model"]:hover {
  border-color: #FFD700;
  box-shadow: 0 4px 12px rgba(184, 134, 11, 0.4);
}

/* Model Viewer Loading State */
model-viewer::part(default-progress-bar) {
  background-color: #B8860B;
}

model-viewer::part(default-progress-bar-container) {
  background-color: rgba(255, 255, 255, 0.1);
}

/* Ensure model viewers are visible and interactive when active */
.carousel-image[data-media-type="model"],
.lightbox-image[data-media-type="model"] {
  cursor: default;
  position: relative;
  z-index: 1;
}

.carousel-image[data-media-type="model"].active model-viewer,
.lightbox-image[data-media-type="model"].active model-viewer {
  display: block;
  pointer-events: auto !important;
  position: relative;
  z-index: 2;
}

.carousel-image[data-media-type="model"]:not(.active) model-viewer,
.lightbox-image[data-media-type="model"]:not(.active) model-viewer {
  display: none;
  pointer-events: none;
}

/* Mobile Responsive Adjustments for Model Viewer */
@media (max-width: 768px) {
  .product-model-viewer {
    min-height: 400px;
  }
  
  .lightbox-model-viewer {
    height: 70vh;
  }
  
  model-viewer::part(default-ar-button) {
    padding: 0.625rem 1.25rem;
    font-size: 0.875rem;
  }
}

@media (max-width: 480px) {
  .product-model-viewer {
    min-height: 300px;
  }
  
  .lightbox-model-viewer {
    height: 60vh;
  }
}

/* Product Video Styles */
.product-video {
  width: 100%;
  height: 100%;
  object-fit: contain;
  background-color: #000;
  border-radius: 8px;
  display: block;
}

/* Video Unmute Button */
.video-unmute-btn {
  position: absolute;
  bottom: 1rem;
  right: 1rem;
  background: rgba(0, 0, 0, 0.7);
  border: 2px solid #B8860B;
  border-radius: 50%;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 10;
  padding: 0;
}

.video-unmute-btn:hover {
  background: rgba(184, 134, 11, 0.9);
  border-color: #FFD700;
  transform: scale(1.1);
}

.video-unmute-btn svg {
  color: #FFD700;
  stroke: #FFD700;
}

.video-unmute-btn:hover svg {
  color: #1C1C1C;
  stroke: #1C1C1C;
}

.lightbox-video {
  width: 100%;
  max-height: 80vh;
  object-fit: contain;
  background-color: #000;
  border-radius: 8px;
}

.carousel-image[data-media-type="video"] {
  background-color: #000;
  border-radius: 8px;
  overflow: hidden;
  min-height: 500px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

/* Video Thumbnail Icon Styling */
.video-thumbnail-icon {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #1C1C1C;
  position: relative;
  border-radius: 8px;
  overflow: hidden;
}

.video-thumbnail-icon svg {
  position: relative;
  z-index: 2;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.5));
}

.product-thumbnail[data-media-type="video"] {
  border: 2px solid #B8860B;
  position: relative;
}

.product-thumbnail[data-media-type="video"]:hover {
  border-color: #FFD700;
  box-shadow: 0 4px 12px rgba(184, 134, 11, 0.4);
}

/* Mobile Responsive Adjustments for Videos */
@media (max-width: 768px) {
  .carousel-image[data-media-type="video"] {
    min-height: 400px;
  }
  
  .lightbox-video {
    max-height: 70vh;
  }
}

@media (max-width: 480px) {
  .carousel-image[data-media-type="video"] {
    min-height: 300px;
  }
  
  .lightbox-video {
    max-height: 60vh;
  }
}
</style>

{% schema %}
{
  "name": "Product",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_image_zoom",
      "label": "Enable image zoom",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_quantity_selector",
      "label": "Show quantity selector",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_variant_labels",
      "label": "Show variant labels",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_payment_button",
      "label": "Show dynamic checkout button",
      "default": true
    }
  ]
}
{% endschema %}

